generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model CartItem {
  id       String  @id @default(uuid())
  userId   String  @default("")
  quantity Int     @default(1)
  itemId   Int
  item     Item    @relation(fields: [itemId], references: [id])
}

model Item {
  id          Int         @id @default(autoincrement())
  title       String
  content     String?
  price       Int         @default(0)
  priceIdStrapi String    @default("")
  published   Boolean     @default(false)
  categoryId  Int         @default(0)
  category    Category   @relation(fields: [categoryId], references: [id]) 
  cartitems   CartItem[]
  favorites   Favorites[]
  images      ItemImage[] // Relation to multiple images
}

model ItemImage { // New model to store multiple image URLs for each item
  id        Int    @id @default(autoincrement())
  url       String // Field to store the image URL
  itemId    Int
  item      Item   @relation(fields: [itemId], references: [id])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  items Item[]
  imageUrl String? // Field to store the category image URL
}

model Favorites {
  id      String @id @default(uuid())
  userId  String @default("")
  item    Item   @relation(fields: [itemId], references: [id])
  itemId  Int
}

// const items = await prisma.items.findMany()
// [{id:1,title:'blah',cartItems:[]},{id:2,title:'blah1',cartItems:[]},{id:3,title:'blah2',cartItems:[]},{id:4,title:'blah3',cartItems:[]}]

// const addItemToCart = await prisma.itemsInCart.create({
//  data:{
//    userId: idFromClerk,
//    itemId: idOfClickedItem
//  }
// })

// const updateItemInCart = async (cartItemId, quantityFromFrontend, userId) => {

//   const cartItem = await prisma.itemsInCart.findOne({
//     where:{
//       id: cartItemId 
//     }
//   })

//   if(!cartItem){
// return null
//   }

//   if(cartItem.userId !== userId){
//     return new Error('fuck off')
//   }

// const updateItemInCart = await prisma.itemsInCart.updateOne({
//   where:{
//     id: cartItemId
//   },{
//     data: quantityFromFrontend
//   }
// })

// return updateItemInCart

// }









// User - separate table

// id
// name
// age
// nationality

// addressForeignKeyId
// disesaseForeignKeyId


// UserAddress - separate table

// address
// buisenessAddress
// postalIndex


// UserDiseases - separate table

// diseasesForeignKeyId

// heartDisesases []
// lungDiseasese []
// liverDiseases []



// id
// name
// age
// nationality
// address
// buisenessAddress
// postalIndex
// heartDisesases []
// lungDiseasese []
// liverDiseases []

// user.find.where(id,{
//   include:{
//     disesases:true,
//     address:true
//   }
// })